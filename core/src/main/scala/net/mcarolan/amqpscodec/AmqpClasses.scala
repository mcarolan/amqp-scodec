package net.mcarolan.amqpscodec
import AmqpTypes._
import cats.data.NonEmptyList
import scodec.bits.BitVector
import scodec.{Codec, DecodeResult, Decoder, Encoder}
//note: this file has been auto generated by the program in the `gen` sub project

object AmqpClasses {

  sealed trait Method {
    val classIndex: AmqpShort
    val methodIndex: AmqpShort
    val argumentValues: List[AmqpType]
  }
  
  case object Connection {
    val index: AmqpShort = AmqpShort(10)
    sealed trait Method extends AmqpClasses.Method
    
    case class Start(
      versionMajor: AmqpByte,
      versionMinor: AmqpByte,
      serverProperties: Table,
      mechanisms: LongString,
      locales: LongString
    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = Start.index
      override val argumentValues: List[AmqpType] = List(versionMajor, versionMinor, serverProperties, mechanisms, locales)
    }
    object Start {
      val index: AmqpShort = AmqpShort(10)
    }

    case class StartOk(
      clientProperties: Table,
      mechanism: ShortString,
      response: LongString,
      locale: ShortString
    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = StartOk.index
      override val argumentValues: List[AmqpType] = List(clientProperties, mechanism, response, locale)
    }
    object StartOk {
      val index: AmqpShort = AmqpShort(11)
    }

    case class Secure(
      challenge: LongString
    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = Secure.index
      override val argumentValues: List[AmqpType] = List(challenge)
    }
    object Secure {
      val index: AmqpShort = AmqpShort(20)
    }

    case class SecureOk(
      response: LongString
    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = SecureOk.index
      override val argumentValues: List[AmqpType] = List(response)
    }
    object SecureOk {
      val index: AmqpShort = AmqpShort(21)
    }

    case class Tune(
      channelMax: AmqpShort,
      frameMax: AmqpLong,
      heartbeat: AmqpShort
    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = Tune.index
      override val argumentValues: List[AmqpType] = List(channelMax, frameMax, heartbeat)
    }
    object Tune {
      val index: AmqpShort = AmqpShort(30)
    }

    case class TuneOk(
      channelMax: AmqpShort,
      frameMax: AmqpLong,
      heartbeat: AmqpShort
    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = TuneOk.index
      override val argumentValues: List[AmqpType] = List(channelMax, frameMax, heartbeat)
    }
    object TuneOk {
      val index: AmqpShort = AmqpShort(31)
    }

    case class Open(
      virtualHost: ShortString,
      reserved1: ShortString,
      reserved2: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = Open.index
      override val argumentValues: List[AmqpType] = List(virtualHost, reserved1, reserved2)
    }
    object Open {
      val index: AmqpShort = AmqpShort(40)
    }

    case class OpenOk(
      reserved1: ShortString
    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = OpenOk.index
      override val argumentValues: List[AmqpType] = List(reserved1)
    }
    object OpenOk {
      val index: AmqpShort = AmqpShort(41)
    }

    case class Close(
      replyCode: AmqpShort,
      replyText: ShortString,
      classId: AmqpShort,
      methodId: AmqpShort
    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = Close.index
      override val argumentValues: List[AmqpType] = List(replyCode, replyText, classId, methodId)
    }
    object Close {
      val index: AmqpShort = AmqpShort(50)
    }

    case class CloseOk(

    ) extends Method {
      override val classIndex: AmqpShort = Connection.index
      override val methodIndex: AmqpShort = CloseOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object CloseOk {
      val index: AmqpShort = AmqpShort(51)
    }

  }

  case object Channel {
    val index: AmqpShort = AmqpShort(20)
    sealed trait Method extends AmqpClasses.Method
    
    case class Open(
      reserved1: ShortString
    ) extends Method {
      override val classIndex: AmqpShort = Channel.index
      override val methodIndex: AmqpShort = Open.index
      override val argumentValues: List[AmqpType] = List(reserved1)
    }
    object Open {
      val index: AmqpShort = AmqpShort(10)
    }

    case class OpenOk(
      reserved1: LongString
    ) extends Method {
      override val classIndex: AmqpShort = Channel.index
      override val methodIndex: AmqpShort = OpenOk.index
      override val argumentValues: List[AmqpType] = List(reserved1)
    }
    object OpenOk {
      val index: AmqpShort = AmqpShort(11)
    }

    case class Flow(
      active: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Channel.index
      override val methodIndex: AmqpShort = Flow.index
      override val argumentValues: List[AmqpType] = List(active)
    }
    object Flow {
      val index: AmqpShort = AmqpShort(20)
    }

    case class FlowOk(
      active: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Channel.index
      override val methodIndex: AmqpShort = FlowOk.index
      override val argumentValues: List[AmqpType] = List(active)
    }
    object FlowOk {
      val index: AmqpShort = AmqpShort(21)
    }

    case class Close(
      replyCode: AmqpShort,
      replyText: ShortString,
      classId: AmqpShort,
      methodId: AmqpShort
    ) extends Method {
      override val classIndex: AmqpShort = Channel.index
      override val methodIndex: AmqpShort = Close.index
      override val argumentValues: List[AmqpType] = List(replyCode, replyText, classId, methodId)
    }
    object Close {
      val index: AmqpShort = AmqpShort(40)
    }

    case class CloseOk(

    ) extends Method {
      override val classIndex: AmqpShort = Channel.index
      override val methodIndex: AmqpShort = CloseOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object CloseOk {
      val index: AmqpShort = AmqpShort(41)
    }

  }

  case object Exchange {
    val index: AmqpShort = AmqpShort(40)
    sealed trait Method extends AmqpClasses.Method
    
    case class Declare(
      reserved1: AmqpShort,
      exchange: ShortString,
      `type`: ShortString,
      passive: AmqpBoolean,
      durable: AmqpBoolean,
      reserved2: AmqpBoolean,
      reserved3: AmqpBoolean,
      noWait: AmqpBoolean,
      arguments: Table
    ) extends Method {
      override val classIndex: AmqpShort = Exchange.index
      override val methodIndex: AmqpShort = Declare.index
      override val argumentValues: List[AmqpType] = List(reserved1, exchange, `type`, passive, durable, reserved2, reserved3, noWait, arguments)
    }
    object Declare {
      val index: AmqpShort = AmqpShort(10)
    }

    case class DeclareOk(

    ) extends Method {
      override val classIndex: AmqpShort = Exchange.index
      override val methodIndex: AmqpShort = DeclareOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object DeclareOk {
      val index: AmqpShort = AmqpShort(11)
    }

    case class Delete(
      reserved1: AmqpShort,
      exchange: ShortString,
      ifUnused: AmqpBoolean,
      noWait: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Exchange.index
      override val methodIndex: AmqpShort = Delete.index
      override val argumentValues: List[AmqpType] = List(reserved1, exchange, ifUnused, noWait)
    }
    object Delete {
      val index: AmqpShort = AmqpShort(20)
    }

    case class DeleteOk(

    ) extends Method {
      override val classIndex: AmqpShort = Exchange.index
      override val methodIndex: AmqpShort = DeleteOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object DeleteOk {
      val index: AmqpShort = AmqpShort(21)
    }

  }

  case object Queue {
    val index: AmqpShort = AmqpShort(50)
    sealed trait Method extends AmqpClasses.Method
    
    case class Declare(
      reserved1: AmqpShort,
      queue: ShortString,
      passive: AmqpBoolean,
      durable: AmqpBoolean,
      exclusive: AmqpBoolean,
      autoDelete: AmqpBoolean,
      noWait: AmqpBoolean,
      arguments: Table
    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = Declare.index
      override val argumentValues: List[AmqpType] = List(reserved1, queue, passive, durable, exclusive, autoDelete, noWait, arguments)
    }
    object Declare {
      val index: AmqpShort = AmqpShort(10)
    }

    case class DeclareOk(
      queue: ShortString,
      messageCount: AmqpLong,
      consumerCount: AmqpLong
    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = DeclareOk.index
      override val argumentValues: List[AmqpType] = List(queue, messageCount, consumerCount)
    }
    object DeclareOk {
      val index: AmqpShort = AmqpShort(11)
    }

    case class Bind(
      reserved1: AmqpShort,
      queue: ShortString,
      exchange: ShortString,
      routingKey: ShortString,
      noWait: AmqpBoolean,
      arguments: Table
    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = Bind.index
      override val argumentValues: List[AmqpType] = List(reserved1, queue, exchange, routingKey, noWait, arguments)
    }
    object Bind {
      val index: AmqpShort = AmqpShort(20)
    }

    case class BindOk(

    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = BindOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object BindOk {
      val index: AmqpShort = AmqpShort(21)
    }

    case class Unbind(
      reserved1: AmqpShort,
      queue: ShortString,
      exchange: ShortString,
      routingKey: ShortString,
      arguments: Table
    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = Unbind.index
      override val argumentValues: List[AmqpType] = List(reserved1, queue, exchange, routingKey, arguments)
    }
    object Unbind {
      val index: AmqpShort = AmqpShort(50)
    }

    case class UnbindOk(

    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = UnbindOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object UnbindOk {
      val index: AmqpShort = AmqpShort(51)
    }

    case class Purge(
      reserved1: AmqpShort,
      queue: ShortString,
      noWait: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = Purge.index
      override val argumentValues: List[AmqpType] = List(reserved1, queue, noWait)
    }
    object Purge {
      val index: AmqpShort = AmqpShort(30)
    }

    case class PurgeOk(
      messageCount: AmqpLong
    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = PurgeOk.index
      override val argumentValues: List[AmqpType] = List(messageCount)
    }
    object PurgeOk {
      val index: AmqpShort = AmqpShort(31)
    }

    case class Delete(
      reserved1: AmqpShort,
      queue: ShortString,
      ifUnused: AmqpBoolean,
      ifEmpty: AmqpBoolean,
      noWait: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = Delete.index
      override val argumentValues: List[AmqpType] = List(reserved1, queue, ifUnused, ifEmpty, noWait)
    }
    object Delete {
      val index: AmqpShort = AmqpShort(40)
    }

    case class DeleteOk(
      messageCount: AmqpLong
    ) extends Method {
      override val classIndex: AmqpShort = Queue.index
      override val methodIndex: AmqpShort = DeleteOk.index
      override val argumentValues: List[AmqpType] = List(messageCount)
    }
    object DeleteOk {
      val index: AmqpShort = AmqpShort(41)
    }

  }

  case object Basic {
    val index: AmqpShort = AmqpShort(60)
    sealed trait Method extends AmqpClasses.Method
    
    case class Qos(
      prefetchSize: AmqpLong,
      prefetchCount: AmqpShort,
      global: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Qos.index
      override val argumentValues: List[AmqpType] = List(prefetchSize, prefetchCount, global)
    }
    object Qos {
      val index: AmqpShort = AmqpShort(10)
    }

    case class QosOk(

    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = QosOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object QosOk {
      val index: AmqpShort = AmqpShort(11)
    }

    case class Consume(
      reserved1: AmqpShort,
      queue: ShortString,
      consumerTag: ShortString,
      noLocal: AmqpBoolean,
      noAck: AmqpBoolean,
      exclusive: AmqpBoolean,
      noWait: AmqpBoolean,
      arguments: Table
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Consume.index
      override val argumentValues: List[AmqpType] = List(reserved1, queue, consumerTag, noLocal, noAck, exclusive, noWait, arguments)
    }
    object Consume {
      val index: AmqpShort = AmqpShort(20)
      val encoder: Encoder[Consume] = Encoder[Consume] { consume: Consume =>
        for {
          reserved1 <- AmqpShort.codec.encode(consume.reserved1)
          queue <- ShortString.codec.encode(consume.queue)
          consumerTag <- ShortString.codec.encode(consume.consumerTag)
          booleans1 <- MethodArgumentCodec.booleansEncoder.encode(NonEmptyList.of(consume.noLocal.value, consume.noAck.value, consume.exclusive.value, consume.noWait.value))
          arguments <- Table.codec.encode(consume.arguments)
        } yield reserved1 ++ queue ++ consumerTag ++ booleans1 ++ arguments
      }
      val decoder: Decoder[Consume] = Decoder[Consume] { bv : BitVector =>
        for {
          reserved1 <- AmqpShort.codec.decode(bv)
          queue <- ShortString.codec.decode(reserved1.remainder)
          consumerTag <- ShortString.codec.decode(queue.remainder)
          booleans1 <- MethodArgumentCodec.booleansDecoder(4).map(_.map(AmqpBoolean)).decode(consumerTag.remainder)
          Seq(noLocal, noAck, exclusive, noWait) = booleans1.value
          arguments <- Table.codec.decode(booleans1.remainder)
        } yield DecodeResult(
          Consume(reserved1.value, queue.value, consumerTag.value, noLocal, noAck, exclusive, noWait, arguments.value),
          arguments.remainder
        )
      }
      val codec: Codec[Consume] = Codec(encoder, decoder)
    }

    case class ConsumeOk(
      consumerTag: ShortString
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = ConsumeOk.index
      override val argumentValues: List[AmqpType] = List(consumerTag)
    }
    object ConsumeOk {
      val index: AmqpShort = AmqpShort(21)
    }

    case class Cancel(
      consumerTag: ShortString,
      noWait: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Cancel.index
      override val argumentValues: List[AmqpType] = List(consumerTag, noWait)
    }
    object Cancel {
      val index: AmqpShort = AmqpShort(30)
    }

    case class CancelOk(
      consumerTag: ShortString
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = CancelOk.index
      override val argumentValues: List[AmqpType] = List(consumerTag)
    }
    object CancelOk {
      val index: AmqpShort = AmqpShort(31)
    }

    case class Publish(
      reserved1: AmqpShort,
      exchange: ShortString,
      routingKey: ShortString,
      mandatory: AmqpBoolean,
      immediate: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Publish.index
      override val argumentValues: List[AmqpType] = List(reserved1, exchange, routingKey, mandatory, immediate)
    }
    object Publish {
      val index: AmqpShort = AmqpShort(40)
    }

    case class Return(
      replyCode: AmqpShort,
      replyText: ShortString,
      exchange: ShortString,
      routingKey: ShortString
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Return.index
      override val argumentValues: List[AmqpType] = List(replyCode, replyText, exchange, routingKey)
    }
    object Return {
      val index: AmqpShort = AmqpShort(50)
    }

    case class Deliver(
      consumerTag: ShortString,
      deliveryTag: AmqpLongLong,
      redelivered: AmqpBoolean,
      exchange: ShortString,
      routingKey: ShortString
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Deliver.index
      override val argumentValues: List[AmqpType] = List(consumerTag, deliveryTag, redelivered, exchange, routingKey)
    }
    object Deliver {
      val index: AmqpShort = AmqpShort(60)
    }

    case class Get(
      reserved1: AmqpShort,
      queue: ShortString,
      noAck: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Get.index
      override val argumentValues: List[AmqpType] = List(reserved1, queue, noAck)
    }
    object Get {
      val index: AmqpShort = AmqpShort(70)
    }

    case class GetOk(
      deliveryTag: AmqpLongLong,
      redelivered: AmqpBoolean,
      exchange: ShortString,
      routingKey: ShortString,
      messageCount: AmqpLong
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = GetOk.index
      override val argumentValues: List[AmqpType] = List(deliveryTag, redelivered, exchange, routingKey, messageCount)
    }
    object GetOk {
      val index: AmqpShort = AmqpShort(71)
    }

    case class GetEmpty(
      reserved1: ShortString
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = GetEmpty.index
      override val argumentValues: List[AmqpType] = List(reserved1)
    }
    object GetEmpty {
      val index: AmqpShort = AmqpShort(72)
    }

    case class Ack(
      deliveryTag: AmqpLongLong,
      multiple: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Ack.index
      override val argumentValues: List[AmqpType] = List(deliveryTag, multiple)
    }
    object Ack {
      val index: AmqpShort = AmqpShort(80)
    }

    case class Reject(
      deliveryTag: AmqpLongLong,
      requeue: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Reject.index
      override val argumentValues: List[AmqpType] = List(deliveryTag, requeue)
    }
    object Reject {
      val index: AmqpShort = AmqpShort(90)
    }

    case class RecoverAsync(
      requeue: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = RecoverAsync.index
      override val argumentValues: List[AmqpType] = List(requeue)
    }
    object RecoverAsync {
      val index: AmqpShort = AmqpShort(100)
    }

    case class Recover(
      requeue: AmqpBoolean
    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = Recover.index
      override val argumentValues: List[AmqpType] = List(requeue)
    }
    object Recover {
      val index: AmqpShort = AmqpShort(110)
    }

    case class RecoverOk(

    ) extends Method {
      override val classIndex: AmqpShort = Basic.index
      override val methodIndex: AmqpShort = RecoverOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object RecoverOk {
      val index: AmqpShort = AmqpShort(111)
    }

  }

  case object Tx {
    val index: AmqpShort = AmqpShort(90)
    sealed trait Method extends AmqpClasses.Method
    
    case class Select(

    ) extends Method {
      override val classIndex: AmqpShort = Tx.index
      override val methodIndex: AmqpShort = Select.index
      override val argumentValues: List[AmqpType] = List()
    }
    object Select {
      val index: AmqpShort = AmqpShort(10)
    }

    case class SelectOk(

    ) extends Method {
      override val classIndex: AmqpShort = Tx.index
      override val methodIndex: AmqpShort = SelectOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object SelectOk {
      val index: AmqpShort = AmqpShort(11)
    }

    case class Commit(

    ) extends Method {
      override val classIndex: AmqpShort = Tx.index
      override val methodIndex: AmqpShort = Commit.index
      override val argumentValues: List[AmqpType] = List()
    }
    object Commit {
      val index: AmqpShort = AmqpShort(20)
    }

    case class CommitOk(

    ) extends Method {
      override val classIndex: AmqpShort = Tx.index
      override val methodIndex: AmqpShort = CommitOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object CommitOk {
      val index: AmqpShort = AmqpShort(21)
    }

    case class Rollback(

    ) extends Method {
      override val classIndex: AmqpShort = Tx.index
      override val methodIndex: AmqpShort = Rollback.index
      override val argumentValues: List[AmqpType] = List()
    }
    object Rollback {
      val index: AmqpShort = AmqpShort(30)
    }

    case class RollbackOk(

    ) extends Method {
      override val classIndex: AmqpShort = Tx.index
      override val methodIndex: AmqpShort = RollbackOk.index
      override val argumentValues: List[AmqpType] = List()
    }
    object RollbackOk {
      val index: AmqpShort = AmqpShort(31)
    }

  }

}
